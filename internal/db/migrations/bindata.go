// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_add_schema.down.sql
// 000001_add_schema.up.sql
// 000002_chats_with_me.down.sql
// 000002_chats_with_me.up.sql
// bindata.go
// migrate.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_add_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\x06\x04\x00\x00\xff\xff\xc5\x72\xd3\x4e\x22\x00\x00\x00")

func _000001_add_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaDownSql,
		"000001_add_schema.down.sql",
	)
}

func _000001_add_schemaDownSql() (*asset, error) {
	bytes, err := _000001_add_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.down.sql", size: 34, mode: os.FileMode(420), modTime: time.Unix(1596286483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_add_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x4b\x6b\x84\x40\x10\x84\xef\xf3\x2b\xea\xb8\xc2\x12\x72\xdf\xd3\xac\x69\x93\x21\xb3\x93\x30\x33\x42\x3c\x89\x1a\x21\x5e\x54\xe6\x41\xfe\x7e\xf0\x81\xe6\x05\x09\x7b\xeb\xa2\xaa\x8b\xaf\x3b\xd5\xc4\x2d\xc1\xa4\x0f\x74\xe1\x10\x19\xd4\x93\x05\xbd\x08\x63\x0d\xea\x21\x9c\x18\x5b\x13\x96\x9f\x25\xfd\x0c\xdc\x8c\xad\xf3\x43\xef\x71\x60\x00\xb0\xa8\xb2\x7b\x85\x21\x2d\xb8\xc4\xb3\x16\x17\xae\x0b\x3c\x52\x71\x9c\x13\xd1\xb7\x6e\xf2\xcf\xe2\x5e\x28\x3b\xb7\xa9\x5c\xca\xc5\x6c\xde\xaa\xf0\x8b\xc9\x92\xbf\x39\xde\x2b\xb7\x51\x4c\x73\xb9\xa3\xac\x6d\x9f\x50\xa0\x29\x23\x4d\x2a\xa5\x2f\x47\x1c\xb6\x9d\xe4\xb8\x17\x35\x43\xec\xc3\xa4\xbe\x63\xe1\x8e\x32\x9e\x4b\x8b\xdb\xff\x00\xfa\x58\xfb\xc6\x75\x63\xe8\xf6\x77\xf9\x58\x5f\x0b\xc8\x92\xd3\x47\x00\x00\x00\xff\xff\x49\x14\x81\xe0\xbc\x01\x00\x00")

func _000001_add_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaUpSql,
		"000001_add_schema.up.sql",
	)
}

func _000001_add_schemaUpSql() (*asset, error) {
	bytes, err := _000001_add_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.up.sql", size: 444, mode: os.FileMode(420), modTime: time.Unix(1596291645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_chats_with_meDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xd1\x4b\xce\x48\x2c\x29\xb6\x06\x04\x00\x00\xff\xff\x3f\x15\x09\x09\x1f\x00\x00\x00")

func _000002_chats_with_meDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_chats_with_meDownSql,
		"000002_chats_with_me.down.sql",
	)
}

func _000002_chats_with_meDownSql() (*asset, error) {
	bytes, err := _000002_chats_with_meDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_chats_with_me.down.sql", size: 31, mode: os.FileMode(420), modTime: time.Unix(1596364430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_chats_with_meUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xd1\x4b\xce\x48\x2c\x29\x56\xd0\xe0\x52\x50\x50\x50\x00\xb1\xe3\x33\x53\x14\x9c\x3c\xdd\x3d\xfd\x42\x14\x02\x82\x3c\x7d\x1d\x83\x22\x15\xbc\x5d\x23\xb9\x34\xad\x01\x01\x00\x00\xff\xff\x64\x9c\xb6\x4b\x48\x00\x00\x00")

func _000002_chats_with_meUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_chats_with_meUpSql,
		"000002_chats_with_me.up.sql",
	)
}

func _000002_chats_with_meUpSql() (*asset, error) {
	bytes, err := _000002_chats_with_meUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_chats_with_me.up.sql", size: 72, mode: os.FileMode(420), modTime: time.Unix(1596364419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x8f\xda\xc8\x12\x7d\xb6\x7f\x45\x07\x29\x91\x7d\xc5\x05\x7f\x63\x23\x8d\x74\x95\x4c\xae\x94\x87\x4d\x56\x9b\xe4\x69\x6b\x85\xda\x76\x37\x63\x2d\xd8\xc4\x36\x99\x62\x46\xf3\xdf\x57\xd5\x65\x08\xf3\x01\xb3\x1a\x25\x23\x79\xb0\xfb\xe3\xd4\xa9\xd3\x55\x07\x33\x9d\x8a\x77\x4d\xa9\xc4\x52\xd5\xaa\x95\xbd\x2a\x45\xbe\x13\xcb\xe6\xbf\x79\x55\x97\xb2\x97\x13\xe1\xfc\xef\x30\xe5\x8a\xcb\x4f\xe2\xe3\xa7\x2f\xe2\xfd\xe5\x87\x2f\x13\xdb\x16\xd3\xe9\xef\xb2\xf8\x5b\x2e\x95\x58\x57\xcb\x56\xf6\x55\x53\x77\x27\x91\xa6\x53\xd1\x35\xdb\xb6\x50\xdd\xdc\x9e\x4e\x85\x47\x7f\xfe\x42\x96\xe5\xa2\x2b\xae\xd4\x5a\x4e\xca\xe6\xba\x9e\x74\xdf\x56\x4f\xcf\x6e\x37\xf7\xe6\x82\x45\x71\x25\xfb\x6e\x71\x5d\xf5\x57\x8b\xb5\x7a\xbc\xf9\xe1\x82\x1f\xfb\xf7\x84\x96\x0d\x3d\x31\x73\x45\x4f\x9b\x47\xc9\xd8\x76\xb5\xde\x34\x6d\x2f\x1c\xdb\x1a\xe5\xbb\x5e\x75\x23\xdb\x1a\x15\xcd\x7a\xd3\xaa\xae\x9b\x2e\x6f\xaa\x0d\x0d\xe8\x75\x4f\x1f\x55\xc3\xff\xa7\x55\xb3\xed\xab\x15\x3d\x34\x66\xc3\x46\xf6\x57\x53\x5d\xad\x14\xdd\xd0\x40\xd7\xb7\x55\xbd\x34\x73\x7d\xb5\x56\x23\xdb\xb5\x6d\xbd\xad\x8b\x3d\xb7\x3f\x94\x2c\x1d\xba\x11\x7f\xfe\x45\x61\xc7\xa2\x96\x6b\x25\x78\x9b\x2b\x9c\xfd\xa8\x6a\xdb\xa6\x75\xc5\xad\x6d\x2d\x6f\xcc\x93\x98\x5f\x08\x62\x35\xf9\xa8\xae\x09\x44\xb5\x8e\xa1\x4d\xcf\x6f\xb7\x5a\xab\xd6\xc0\xba\xae\x6d\x55\xda\x6c\x78\x75\x21\xea\x6a\x45\x10\x56\xab\xfa\x6d\x5b\xd3\xe3\x58\xe8\x75\x3f\x79\x4f\xe8\xda\x19\xb5\x4a\x96\xe2\xf5\xb7\xb9\x78\xfd\x7d\xc4\x4c\x4c\x2c\xd7\xb6\xee\x6c\xdb\xfa\x2e\x5b\x91\x6f\xb5\xe0\x38\x1c\xc4\xb6\x16\x4c\xe7\x42\x54\xcd\xe4\x5d\xb3\xd9\x39\x6f\xf2\xad\x1e\x8b\xe5\x8d\x6b\x5b\xc5\xea\xfd\x9e\xe9\xe4\xdd\xaa\xe9\x94\xe3\xda\x3f\x8b\x0f\xc1\x30\xfe\x09\x20\xd5\xb6\xcc\x7b\x18\xcc\xb7\x7a\xf2\x96\xa8\x3b\xee\x98\x56\xd8\x77\xb6\xdd\xef\x36\x4a\xc8\xae\x53\x3d\x49\xbe\x2d\x7a\x42\x31\xf9\x0d\xe7\x61\x5b\x55\xad\x1b\x21\x9a\x6e\xf2\xff\x6a\xa5\x3e\xd4\xba\x39\xec\x1b\x8e\x70\x3f\x7e\x84\x60\xce\x50\x88\xe1\x18\x6d\xab\xab\x6e\xcc\x73\x55\xf7\x49\x64\x5b\x6b\xea\x43\x71\x00\xfd\xad\x29\x95\x19\xfc\x52\xad\x95\xa0\x32\x99\xd0\x1d\xc5\x99\x4e\xc5\x47\xc2\x1a\x52\xa0\xca\x32\x32\x70\x0d\x39\xba\x7a\x48\xc2\x35\xeb\x1d\x77\x08\x4d\x64\x0e\x7b\x27\x66\x27\xa3\x7e\x26\x46\xc7\xa8\x44\xf1\x0c\x2a\xad\x77\x5c\x4e\xe0\x3e\xa8\xd9\xc8\xa0\x94\xc8\x3d\x50\x4a\xf4\x0c\x28\xad\x77\xdc\x63\x19\xee\x43\x9b\xed\x07\x68\xa3\xce\x03\xf4\x4a\xef\x8c\x60\xe7\x83\xd0\x4e\xc7\xfd\xa1\xec\xa3\x28\x47\x72\x7f\xe8\x2e\xab\xf6\x5e\x98\xeb\x2b\xd5\x5f\xa9\x56\x48\x51\x56\xad\x2a\xfa\xa6\xdd\x9d\x09\x67\xf6\x3b\xae\xc8\x9b\x66\xf5\x38\x9b\x37\x4d\x37\xa1\x3c\x29\xc6\xab\x0b\xe1\xed\x4f\x63\xd7\xdd\x0b\x59\x75\xa2\xdb\x75\xcf\xc9\xf7\x79\xd7\xf1\x91\xa8\x56\xcb\x42\xdd\xde\x1d\xc5\x1b\xea\x9b\x5a\x76\xb1\x78\xe4\xb1\x97\xcd\x75\xfd\xf9\xdb\x4a\x5c\x0c\x55\xee\x8c\x00\x7d\x0d\x98\xe6\x80\x5e\x0a\xe8\x79\x4f\x5f\x5a\x03\xce\x02\x40\x2f\x03\xd4\xf4\xa9\x01\x63\x8f\xf7\xcc\x12\x40\x9d\x00\xce\x68\x5d\x0c\x38\x8b\x01\xe3\x08\x50\x7b\x80\xb3\x08\x30\x0e\x79\x2e\x2d\x79\xcc\x2b\x00\x3d\xc5\x58\x71\x02\x18\xa5\x80\x85\x04\x0c\x08\xd3\xe7\xb5\x84\x49\xeb\xe8\xd3\x5c\x11\xe0\xcc\x07\xcc\x63\x40\x8f\xe6\xa2\xfb\xdc\xe8\x2a\x62\xe6\x58\x86\x80\x91\x02\x0c\x82\xe3\x1c\x46\x7b\xff\x3d\x29\xca\x60\x11\x4f\x59\xef\xde\x48\x8e\xac\xdb\xb6\xac\xd3\xfa\x8e\x6d\xcb\x1a\x9d\xfe\xfa\x1b\x8d\x6d\xcb\xa5\x53\x3a\x4f\x88\xb8\xfc\xc7\x78\xd4\x31\x17\x63\x52\x87\x6f\x82\xe7\xb2\x79\xce\x74\x0f\x5e\x69\xdc\x6e\x7e\xf1\xb0\xd8\x6e\xc9\x3a\xe6\xe2\x6c\x32\xc6\x42\xe6\x22\x8c\xc6\xa6\x70\xe7\xc7\x7d\xed\x44\x81\xe7\x9a\x71\x6a\xb5\x39\xb7\xe2\xd7\xba\x42\xc7\x8f\xb3\x24\x48\x93\x28\x0d\xc7\xc2\x73\xef\x6c\x4b\x52\xf8\x37\x26\xdf\x5b\x93\xe4\x5c\x0c\xb9\x12\xb7\xb9\xf9\x7f\x77\x38\x0b\x39\x7e\xa6\xd4\xbf\x6e\x5e\x5a\xe8\x59\x01\x98\x79\x80\x51\x0e\x98\xe4\x80\x69\x04\x18\x79\x80\xbe\xc7\xf7\x8a\x0a\x2e\x04\x0c\x72\x40\x25\x01\x73\x2a\xe0\x00\xd0\x0f\x86\x02\xd4\x5c\x84\xb2\x00\x4c\x32\xc0\x8c\xd6\x52\xf1\x86\x7c\x1f\x7a\x80\x21\x15\x69\x00\x18\x16\x80\x69\x06\xe8\x4b\x5e\x13\x2b\x6e\x1e\x45\x8d\xe1\x03\x6a\x05\x38\x53\xdc\x38\xa9\xcf\xe3\x5e\xcc\xcd\x33\xa3\xf8\x39\xa0\x0c\x00\xa5\xe4\xdc\xa4\x06\x0c\x73\xc0\x32\x06\x2c\x22\xc0\xa0\x04\x2c\x7c\x40\x19\x71\xd3\x52\x23\x29\x9f\x73\xf1\x33\xc0\x32\x62\x4e\x84\x99\x97\xac\x4d\x42\xcf\x25\xe7\x46\x9c\x48\x0f\x3f\x05\x8c\x73\x40\x9f\x72\x48\x00\x33\x0d\x18\xc4\x80\xba\xe4\x46\x2d\x29\x8f\x02\x50\x96\xac\x4d\x14\xb2\x4e\xd4\xb4\xc9\xa0\x6d\xee\x01\xca\x14\x30\x0f\x98\x7b\x1a\x33\x3e\x71\x34\x1a\x46\xac\x91\x9f\x00\xfa\x33\x40\x49\x26\x91\xb3\x46\x71\xc0\x58\x86\x4b\x08\x58\x92\x9e\x33\xc0\x44\xb1\x21\x15\x1a\x50\x05\xac\x5f\x90\xb2\x06\x34\x2f\xc9\x64\x0a\x36\x18\x32\x88\x84\xb8\x2a\xd6\xcb\x68\x9a\x03\x16\x74\x46\x01\x60\x4e\xda\x65\x3c\x1f\x0c\xfb\xc9\x90\x22\x32\xa2\x10\x30\xcf\x00\xe5\xfe\x5c\x4b\xd6\x80\x4c\x50\x7a\x80\x41\x06\x18\x50\xde\x25\x60\x20\x01\x65\xcc\x86\x16\xcd\x00\xfd\x02\x30\x27\xcd\x48\xd3\x88\x73\xa5\xfc\xc2\x78\xd0\x89\xf8\x85\x7c\x46\xb9\x62\xfd\xe9\x8c\x52\x05\x18\x06\x80\x99\xe2\x5a\x24\xae\x65\xce\x35\x6a\x6a\x55\x02\xc6\x29\xa0\xa6\x1c\x12\x36\x5e\xb3\x37\x1d\x0c\x79\x06\xa8\x33\x5e\x13\x6b\xd6\xb2\x48\x39\x57\x63\x92\xb3\xc7\xb5\x4f\x57\x44\xf5\x18\x0d\xf5\x46\xe7\x46\x86\xed\xff\x0b\x23\x35\x2d\xf7\x33\x6c\xd4\x00\x9d\x30\x51\x7e\xcb\x7f\xce\x42\x0d\xc2\xcb\x0c\xf4\x38\x8b\x5f\x67\x9f\xfb\x34\x06\xf3\x8c\xa2\x17\xb8\x67\xe6\x27\x51\xfc\xf3\xdc\xf3\xc1\xef\xa9\x5f\xf2\xae\xe0\xb3\x05\xe9\xa1\x9d\xe3\xf8\x65\xef\x09\xd4\xfe\xd4\x12\x85\xe2\xf1\xa0\xe0\x16\xa4\x36\x3b\xf5\x7e\x10\x6a\x40\x7f\xb0\x4e\xba\x7c\x7d\xe6\xfd\xe0\x69\x2d\x5e\x5a\xdb\x4f\xa3\xfd\x28\xf0\x53\x3f\x75\x9f\xaa\xf2\xa7\xb1\xce\x94\xfa\x3f\x01\x00\x00\xff\xff\xbf\x94\x1f\xf5\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1596397781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x3d\x6f\xdb\x30\x10\x86\x67\xf2\x57\x5c\x08\xa4\x91\x02\x99\x2a\xd0\x4e\x2e\x3c\xb4\x69\x86\x0c\xf6\xd0\xa4\xe8\x52\x20\xa0\xe5\x13\x4d\x44\xfc\x30\x49\x25\x01\x0a\xff\xf7\x82\xfa\x8a\x5d\xb7\x85\x27\x1d\xc9\xe3\xfb\xbc\x77\x3c\xc8\x89\xea\x49\x48\x04\xad\xa4\x17\x51\x59\x13\x28\x55\xda\x59\x1f\x21\xa3\x84\x6d\x44\x14\x6b\x11\xb0\x0c\xbb\x86\x51\xc2\xd0\x7b\xeb\x43\x8a\x6a\x1d\xd3\x27\x2a\x8d\x8c\x52\xc2\xa4\x8a\xdb\x76\xcd\x2b\xab\x4b\x69\x1b\x61\xe4\xac\x97\xc4\x72\xfc\x3e\x7f\x64\x67\xe6\x95\x13\xd6\xd9\x10\xa5\xc7\x44\x5c\x2b\x93\xb6\xe1\x3c\x85\x60\x5b\x5f\x61\x29\xed\xe3\x70\x8f\xd1\x9c\xd2\xb2\x94\x76\x2e\xd1\x60\x4a\x03\x69\xc1\xb7\x06\x8e\xf4\x66\x43\xfa\x61\xf8\xfc\xe1\x60\x05\x33\xf7\x24\x0f\xda\x05\x33\x25\x8d\xf5\x08\x57\xfc\xfa\x27\x97\xf6\x0a\x66\xce\x63\xad\x5e\x81\x03\x3f\x05\xd6\x3a\x02\x2f\x39\xe7\xc9\x0c\x2c\x7b\xc3\x10\xaa\x2d\x6a\x01\xb5\x8d\x60\x20\x44\x74\x81\xc3\x5d\xdd\x47\xb0\x58\xc0\x7b\x88\x5b\x34\x03\x15\x41\x34\x0d\xb4\x8e\xd3\xba\x35\xd5\xa8\x91\x85\x5d\x03\xd7\x61\xd7\xf0\xaf\x5f\x8a\xe1\xa6\x32\x31\x87\xee\xc9\xe0\x17\x25\xa1\x48\x31\xcc\x17\x30\x94\xc2\x7f\xa8\xb8\xbd\x33\x21\x0a\x53\x61\x36\x6e\x7e\xc3\xbe\x77\xd9\xe7\x10\x30\xae\x84\xc6\x90\xe5\x05\x74\xab\x3c\xa7\x44\xd5\x9d\xcc\xc5\x02\x8c\x6a\x92\x2e\xf1\x18\x5b\x6f\x52\x69\xfc\x36\xc1\xea\x8c\x35\x56\x6c\x46\x0c\xcc\xe1\xf2\x85\x75\xf0\x9c\x92\x3d\xa5\xc4\x4d\x4e\xc6\xf7\x3d\xb6\x12\x76\x4d\x01\xef\xa6\xb3\x1b\x6b\x6a\x25\x13\x69\x39\xb5\xfd\x41\xac\x1b\x9c\x03\xb0\xb5\x8d\x8f\x43\x5f\x58\x41\x09\xb9\x8f\x22\xa2\x46\x13\x1f\x94\x46\xdb\xc6\x39\xa4\x11\xe5\x4b\x65\xda\x88\x05\x25\xfb\xff\x95\x80\xde\xf7\x0e\xf5\xe4\x70\xd0\xe6\x2b\x7c\x39\xf2\x48\x09\x61\x6f\x53\xc1\x0a\x08\x89\xce\x9c\x7c\x65\x05\xb8\x73\xfb\x54\x79\x4c\x0f\xda\x43\xac\x3f\xe9\x94\x1a\x87\xe0\x22\x0d\x41\x12\x19\x64\x93\x33\x7e\x9f\x8e\xb2\x2e\x21\xff\xf4\x27\xed\x6f\xb8\x5e\xeb\x72\x33\x70\xba\xe5\x88\x23\xfb\x37\x8b\x46\x35\x89\x7f\x04\xfb\xee\xb2\x53\x88\xaa\xe1\xa2\xff\x27\xf0\xbb\x90\xa1\xf7\xc5\xd4\xb0\x5b\xef\x57\xf6\x66\x2b\x8c\xc4\xfc\x9f\x86\x5a\x77\x54\x72\x62\xee\xe9\xa1\x8b\x3d\xfd\x1d\x00\x00\xff\xff\xbc\x4f\x37\x5c\xa2\x04\x00\x00")

func migrateGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateGo,
		"migrate.go",
	)
}

func migrateGo() (*asset, error) {
	bytes, err := migrateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate.go", size: 1186, mode: os.FileMode(420), modTime: time.Unix(1596284373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_add_schema.down.sql":    _000001_add_schemaDownSql,
	"000001_add_schema.up.sql":      _000001_add_schemaUpSql,
	"000002_chats_with_me.down.sql": _000002_chats_with_meDownSql,
	"000002_chats_with_me.up.sql":   _000002_chats_with_meUpSql,
	"bindata.go":                    bindataGo,
	"migrate.go":                    migrateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_add_schema.down.sql":    &bintree{_000001_add_schemaDownSql, map[string]*bintree{}},
	"000001_add_schema.up.sql":      &bintree{_000001_add_schemaUpSql, map[string]*bintree{}},
	"000002_chats_with_me.down.sql": &bintree{_000002_chats_with_meDownSql, map[string]*bintree{}},
	"000002_chats_with_me.up.sql":   &bintree{_000002_chats_with_meUpSql, map[string]*bintree{}},
	"bindata.go":                    &bintree{bindataGo, map[string]*bintree{}},
	"migrate.go":                    &bintree{migrateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
