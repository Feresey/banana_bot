// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_add_schema.down.sql
// 000001_add_schema.up.sql
// 000002_chats_with_me.down.sql
// 000002_chats_with_me.up.sql
// 000003_unique_person.down.sql
// 000003_unique_person.up.sql
// bindata.go
// migrate.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_add_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\x06\x04\x00\x00\xff\xff\xc5\x72\xd3\x4e\x22\x00\x00\x00")

func _000001_add_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaDownSql,
		"000001_add_schema.down.sql",
	)
}

func _000001_add_schemaDownSql() (*asset, error) {
	bytes, err := _000001_add_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.down.sql", size: 34, mode: os.FileMode(420), modTime: time.Unix(1596286483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_add_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x4b\x6b\x84\x40\x10\x84\xef\xf3\x2b\xea\xb8\xc2\x12\x72\xdf\xd3\xac\x69\x93\x21\xb3\x93\x30\x33\x42\x3c\x89\x1a\x21\x5e\x54\xe6\x41\xfe\x7e\xf0\x81\xe6\x05\x09\x7b\xeb\xa2\xaa\x8b\xaf\x3b\xd5\xc4\x2d\xc1\xa4\x0f\x74\xe1\x10\x19\xd4\x93\x05\xbd\x08\x63\x0d\xea\x21\x9c\x18\x5b\x13\x96\x9f\x25\xfd\x0c\xdc\x8c\xad\xf3\x43\xef\x71\x60\x00\xb0\xa8\xb2\x7b\x85\x21\x2d\xb8\xc4\xb3\x16\x17\xae\x0b\x3c\x52\x71\x9c\x13\xd1\xb7\x6e\xf2\xcf\xe2\x5e\x28\x3b\xb7\xa9\x5c\xca\xc5\x6c\xde\xaa\xf0\x8b\xc9\x92\xbf\x39\xde\x2b\xb7\x51\x4c\x73\xb9\xa3\xac\x6d\x9f\x50\xa0\x29\x23\x4d\x2a\xa5\x2f\x47\x1c\xb6\x9d\xe4\xb8\x17\x35\x43\xec\xc3\xa4\xbe\x63\xe1\x8e\x32\x9e\x4b\x8b\xdb\xff\x00\xfa\x58\xfb\xc6\x75\x63\xe8\xf6\x77\xf9\x58\x5f\x0b\xc8\x92\xd3\x47\x00\x00\x00\xff\xff\x49\x14\x81\xe0\xbc\x01\x00\x00")

func _000001_add_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaUpSql,
		"000001_add_schema.up.sql",
	)
}

func _000001_add_schemaUpSql() (*asset, error) {
	bytes, err := _000001_add_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.up.sql", size: 444, mode: os.FileMode(420), modTime: time.Unix(1596291645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_chats_with_meDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xd1\x4b\xce\x48\x2c\x29\xb6\x06\x04\x00\x00\xff\xff\x3f\x15\x09\x09\x1f\x00\x00\x00")

func _000002_chats_with_meDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_chats_with_meDownSql,
		"000002_chats_with_me.down.sql",
	)
}

func _000002_chats_with_meDownSql() (*asset, error) {
	bytes, err := _000002_chats_with_meDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_chats_with_me.down.sql", size: 31, mode: os.FileMode(420), modTime: time.Unix(1596364430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_chats_with_meUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xd1\x4b\xce\x48\x2c\x29\x56\xd0\xe0\x52\x50\x50\x50\x00\xb1\xe3\x33\x53\x14\x9c\x3c\xdd\x3d\xfd\x42\x14\x02\x82\x3c\x7d\x1d\x83\x22\x15\xbc\x5d\x23\xb9\x34\xad\x01\x01\x00\x00\xff\xff\x64\x9c\xb6\x4b\x48\x00\x00\x00")

func _000002_chats_with_meUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_chats_with_meUpSql,
		"000002_chats_with_me.up.sql",
	)
}

func _000002_chats_with_meUpSql() (*asset, error) {
	bytes, err := _000002_chats_with_meUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_chats_with_me.up.sql", size: 72, mode: os.FileMode(420), modTime: time.Unix(1596364419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_unique_personDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x50\xca\x4c\xa9\x88\x2f\xcd\xcb\x2c\x2c\x4d\x8d\x2f\x48\x2d\x2a\xce\xcf\x53\xb2\x06\x04\x00\x00\xff\xff\x57\xfb\xa6\x74\x29\x00\x00\x00")

func _000003_unique_personDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_unique_personDownSql,
		"000003_unique_person.down.sql",
	)
}

func _000003_unique_personDownSql() (*asset, error) {
	bytes, err := _000003_unique_personDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_unique_person.down.sql", size: 41, mode: os.FileMode(420), modTime: time.Unix(1596571093, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_unique_personUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\xf5\xf3\x0c\x0c\x75\x55\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x50\xca\x4c\xa9\x88\x2f\xcd\xcb\x2c\x2c\x4d\x8d\x2f\x48\x2d\x2a\xce\xcf\x53\x52\xf0\xf7\x53\x48\xca\x2f\xd1\x83\x70\x8b\x15\x34\x4a\x8b\x53\x8b\xe2\x33\x53\x74\x92\x33\x12\x4b\xe2\x33\x53\x34\xad\x01\x01\x00\x00\xff\xff\xed\xec\x5a\xda\x57\x00\x00\x00")

func _000003_unique_personUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_unique_personUpSql,
		"000003_unique_person.up.sql",
	)
}

func _000003_unique_personUpSql() (*asset, error) {
	bytes, err := _000003_unique_personUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_unique_person.up.sql", size: 87, mode: os.FileMode(420), modTime: time.Unix(1596571086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdb\x6e\xdb\x46\x10\x7d\x26\xbf\x62\x23\x20\x01\x59\xa8\x12\xef\x22\x05\x18\x28\x12\xa7\x40\x1e\x9a\x14\x4d\xf2\xd4\x29\x84\x25\xb9\x2b\x13\x95\x48\x99\xa4\xe2\x91\x0d\xff\x7b\x31\x3b\x94\x22\x5f\x64\x17\x46\x22\x80\x22\xf7\x32\x67\x66\xce\xce\x1c\x51\xd3\xa9\x78\xd7\x94\x4a\x2c\x55\xad\x5a\xd9\xab\x52\xe4\x3b\xb1\x6c\x7e\xcd\xab\xba\x94\xbd\x9c\x08\xe7\xb7\xc3\x92\x2b\xce\x3f\x89\x8f\x9f\xbe\x88\xf7\xe7\x1f\xbe\x4c\x6c\x5b\x4c\xa7\x7f\xca\xe2\x5f\xb9\x54\x62\x5d\x2d\x5b\xd9\x57\x4d\xdd\x9d\x44\x9a\x4e\x45\xd7\x6c\xdb\x42\x75\x73\x7b\x3a\x15\x1e\x7d\xfc\x85\x2c\xcb\x45\x57\x5c\xa8\xb5\x9c\x94\xcd\x55\x3d\xe9\x2e\x57\x8f\xaf\x6e\x37\x77\xd6\x82\x45\x71\x21\xfb\x6e\x71\x55\xf5\x17\x8b\xb5\x7a\x68\x7c\x7f\xc3\x3d\xfb\x70\xb1\xad\xab\xcb\xad\x5a\x6c\x54\xdb\x35\xf5\x43\xfb\xfb\x1b\xbe\xdb\xef\x13\x5a\x36\x34\xe2\xcc\x15\x8d\x36\x0f\xc8\xb0\xed\x6a\xbd\x69\xda\x5e\x38\xb6\x35\xca\x77\xbd\xea\x46\xb6\x35\x2a\x9a\xf5\xa6\x55\x5d\x37\x5d\x5e\x57\x1b\x9a\xd0\xeb\x9e\x6e\x55\xc3\xdf\xd3\xaa\xd9\xf6\xd5\x8a\x06\x8d\x31\xd8\xc8\xfe\x62\xaa\xab\x95\xa2\x07\x9a\xe8\xfa\xb6\xaa\x97\x66\xad\xaf\xd6\x6a\x64\xbb\xb6\xad\xb7\x75\xb1\x8f\xed\x2f\x25\x4b\x87\x1e\xc4\xdf\xff\x90\xdb\xb1\xa8\xe5\x5a\x09\x36\x73\x85\xb3\x9f\x55\x6d\xdb\xb4\xae\xb8\xb1\xad\xe5\xb5\x19\x89\xf9\x99\xa0\xa8\x26\x1f\xd5\x15\x81\xa8\xd6\x31\x61\xd3\xf8\xed\x56\x6b\xd5\x1a\x58\xd7\xb5\xad\x4a\x1b\x83\x57\x67\xa2\xae\x56\x04\x61\xb5\xaa\xdf\xb6\x35\x0d\xc7\x42\xaf\xfb\xc9\x7b\x42\xd7\xce\xa8\x55\xb2\x14\xaf\x2f\xe7\xe2\xf5\xb7\x11\x47\x62\x7c\xb9\xb6\x75\x6b\xdb\xd6\x37\xd9\x8a\x7c\xab\x05\xfb\x61\x27\xb6\xb5\xe0\x70\xce\x44\xd5\x4c\xde\x35\x9b\x9d\xf3\x26\xdf\xea\xb1\x58\x5e\xbb\xb6\x55\xac\xde\xef\x23\x9d\xbc\x5b\x35\x9d\x72\x5c\xfb\x47\xc5\x43\x30\x8c\x7f\x02\x48\xb5\x2d\xc7\x3d\x4c\xe6\x5b\x3d\x79\x4b\xa1\x3b\xee\x98\x76\xd8\xb7\xb6\xdd\xef\x36\x4a\xc8\xae\x53\x3d\x51\xbe\x2d\x7a\x42\x31\xf9\x0d\xe7\x61\x5b\x55\xad\x1b\x21\x9a\x6e\xf2\x7b\xb5\x52\x1f\x6a\xdd\x1c\xec\x86\x23\xdc\xcf\x1f\x21\x98\x33\x14\x62\x38\x46\xdb\xea\xaa\x6b\x33\xae\xea\x3e\x89\x6c\x6b\x4d\x7d\x2c\x0e\xa0\x7f\x34\xa5\x32\x93\x5f\xaa\xb5\x12\x54\x26\x13\x7a\x22\x3f\xd3\xa9\xf8\x48\x58\x43\x0a\x54\x59\x86\x06\xae\x21\x47\x57\xf7\x83\x70\xcd\x7e\xc7\x1d\x5c\x53\x30\x07\xdb\x89\xb1\x64\xd4\xcf\x14\xd1\x31\x2a\x85\xf8\x04\x2a\xed\x77\x5c\x4e\xe0\x2e\xa8\x31\x64\x50\x4a\xe4\x0e\x28\x25\xfa\x04\x28\xed\x77\xdc\x63\x1a\xee\x42\x1b\xf3\x03\xb4\x61\xe7\x1e\x7a\xa5\x77\x86\xb0\xa7\x9d\x90\xa5\xe3\x7e\x67\xf6\x81\x97\x23\xba\x3f\x74\xe7\x55\x7b\xc7\xcd\xd5\x85\xea\x2f\x54\x2b\xa4\x28\xab\x56\x15\x7d\xd3\xee\x9e\x70\x67\xec\x1d\x57\xe4\x4d\xb3\x7a\x98\xcd\x9b\xa6\x9b\x50\x9e\xe4\xe3\xd5\x99\xf0\xf6\xa7\xb1\xeb\xee\xb8\xac\x3a\xd1\xed\xba\xe7\xe8\xfb\xbc\xeb\xf8\x48\x54\xab\x65\xa1\x6e\x6e\x8f\xfc\x0d\xf5\x4d\x2d\xbb\x58\x3c\xd0\xe8\xf3\xe6\xaa\xfe\x7c\xb9\x12\x67\x43\x95\x3b\x23\x40\x5f\x03\xa6\x39\xa0\x97\x02\x7a\xde\xe3\x97\xd6\x80\xb3\x00\xd0\xcb\x00\x35\xdd\x35\x60\xec\xb1\xcd\x2c\x01\xd4\x09\xe0\x8c\xf6\xc5\x80\xb3\x18\x30\x8e\x00\xb5\x07\x38\x8b\x00\xe3\x90\xd7\xd2\x92\xe7\xbc\x02\xd0\x53\x8c\x15\x27\x80\x51\x0a\x58\x48\xc0\x80\x30\x7d\xde\x4b\x98\xb4\x8f\xee\xe6\x8a\x00\x67\x3e\x60\x1e\x03\x7a\xb4\x16\xdd\x8d\x8d\xae\x22\xe6\x18\xcb\x10\x30\x52\x80\x41\x70\x9c\xc3\x68\xaf\xbf\x27\x49\x19\x24\xe2\x31\xe9\xdd\x0b\xc9\x91\x74\xdb\x96\x75\x9a\xdf\xb1\x6d\x59\xa3\xd3\x3f\x9f\xa3\xb1\x6d\xb9\x74\x4a\x4f\x07\x44\xb1\xfc\x62\x34\xea\x38\x16\x23\x52\x87\x5f\x82\xe7\xb2\x79\x4e\x74\x0f\x5a\x69\xd4\x6e\x7e\x76\xbf\xd8\x6e\x48\x3a\xe6\xe2\xc9\x64\x8c\x84\xcc\x45\x18\x8d\x4d\xe1\xce\x8f\xfb\xda\x89\x02\xcf\x35\xf3\xd4\x6a\x73\x6e\xc5\xaf\x75\x85\x8e\x1f\x67\x49\x90\x26\x51\x1a\x8e\x85\xe7\xde\xda\x96\x24\xf7\x6f\x4c\xbe\x37\x26\xc9\xb9\x18\x72\xa5\xd8\xe6\xe6\xfb\xf6\x70\x16\x72\xfc\x4c\xa9\x7f\xdd\xbc\xb4\xd0\xb3\x02\x30\xf3\x00\xa3\x1c\x30\xc9\x01\xd3\x08\x30\xf2\x00\x7d\x8f\x9f\x15\x15\x5c\x08\x18\xe4\x80\x4a\x02\xe6\x54\xc0\x01\xa0\x1f\x0c\x05\xa8\xb9\x08\x65\x01\x98\x64\x80\x19\xed\xa5\xe2\x0d\xf9\x39\xf4\x00\x43\x2a\xd2\x00\x30\x2c\x00\xd3\x0c\xd0\x97\xbc\x27\x56\xdc\x3c\x8a\x1a\xc3\x07\xd4\x0a\x70\xa6\xb8\x71\x52\x9f\xe7\xbd\x98\x9b\x67\x46\xfe\x73\x40\x19\x00\x4a\xc9\xb9\x49\x0d\x18\xe6\x80\x65\x0c\x58\x44\x80\x41\x09\x58\xf8\x80\x32\xe2\xa6\xa5\x46\x52\x3e\xe7\xe2\x67\x80\x65\xc4\x31\x11\x66\x5e\x32\x37\x09\x8d\x4b\xce\x8d\x62\x22\x3e\xfc\x14\x30\xce\x01\x7d\xca\x21\x01\xcc\x34\x60\x10\x03\xea\x92\x1b\xb5\xa4\x3c\x0a\x40\x59\x32\x37\x51\xc8\x3c\x51\xd3\x26\x03\xb7\xb9\x07\x28\x53\xc0\x3c\xe0\xd8\xd3\x98\xf1\x29\x46\xc3\x61\xc4\x1c\xf9\x09\xa0\x3f\x03\x94\x24\x12\x39\x73\x14\x07\x8c\x65\x62\x09\x01\x4b\xe2\x73\x06\x98\x28\x16\xa4\x42\x03\xaa\x80\xf9\x0b\x52\xe6\x80\xd6\x25\x89\x4c\xc1\x02\x43\x02\x91\x50\xac\x8a\xf9\x32\x9c\xe6\x80\x05\x9d\x51\x00\x98\x13\x77\x19\xaf\x07\x83\x3d\x09\x52\x44\x42\x14\x02\xe6\x19\xa0\xdc\x9f\x6b\xc9\x1c\x90\x08\x4a\x0f\x30\xc8\x00\x03\xca\xbb\x04\x0c\x24\xa0\x8c\x59\xd0\xa2\x19\xa0\x5f\x00\xe6\xc4\x19\x71\x1a\x71\xae\x94\x5f\x18\x0f\x3c\x51\x7c\x21\x9f\x51\xae\x98\x7f\x3a\xa3\x54\x01\x86\x01\x60\xa6\xb8\x16\x29\xd6\x32\xe7\x1a\x35\xb5\x2a\x01\xe3\x14\x50\x53\x0e\x09\x0b\xaf\xb1\x4d\x07\x41\x9e\x01\xea\x8c\xf7\xc4\x9a\xb9\x2c\x52\xce\xd5\x88\xe4\xec\x61\xed\xd3\x15\x51\x3d\x46\x43\xbd\xd1\xb9\x91\x60\xfb\xff\x43\x48\x4d\xcb\xfd\x08\x19\x35\x40\x27\x44\x94\xdf\xf2\x9f\x93\x50\x83\xf0\x32\x01\x3d\xce\xe2\xe7\xc9\xe7\x3e\x8d\x41\x3c\xa3\xe8\x05\xea\x99\xf9\x49\x14\xff\x38\xf5\xbc\xf7\x7f\xec\xa7\xbc\x2b\xf8\x2c\x41\x7a\x68\xe7\x38\x7e\xd9\x7b\x02\xb5\x3f\xb5\x44\xa1\x78\x3e\x28\xb8\x05\xa9\xcd\x4e\xbd\x1f\x84\x1a\xd0\x1f\xa4\x93\x2e\x5f\x3f\xf1\x7e\xf0\x38\x17\x2f\xad\xed\xc7\xd1\xbe\x17\xf8\xa9\xbf\xca\xa6\xca\xff\x0b\x00\x00\xff\xff\x00\x70\x5c\x84\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1596571126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x3d\x6f\xdb\x30\x10\x86\x67\xf2\x57\x5c\x08\xa4\x91\x02\x99\x2a\xd0\x4e\x2e\x3c\xb4\x69\x86\x0c\xf6\xd0\xa4\xe8\x52\x20\xa0\xe5\x13\x4d\x44\xfc\x30\x49\x25\x01\x0a\xff\xf7\x82\xfa\x8a\x5d\xb7\x85\x27\x1d\xc9\xe3\xfb\xbc\x77\x3c\xc8\x89\xea\x49\x48\x04\xad\xa4\x17\x51\x59\x13\x28\x55\xda\x59\x1f\x21\xa3\x84\x6d\x44\x14\x6b\x11\xb0\x0c\xbb\x86\x51\xc2\xd0\x7b\xeb\x43\x8a\x6a\x1d\xd3\x27\x2a\x8d\x8c\x52\xc2\xa4\x8a\xdb\x76\xcd\x2b\xab\x4b\x69\x1b\x61\xe4\xac\x97\xc4\x72\xfc\x3e\x7f\x64\x67\xe6\x95\x13\xd6\xd9\x10\xa5\xc7\x44\x5c\x2b\x93\xb6\xe1\x3c\x85\x60\x5b\x5f\x61\x29\xed\xe3\x70\x8f\xd1\x9c\xd2\xb2\x94\x76\x2e\xd1\x60\x4a\x03\x69\xc1\xb7\x06\x8e\xf4\x66\x43\xfa\x61\xf8\xfc\xe1\x60\x05\x33\xf7\x24\x0f\xda\x05\x33\x25\x8d\xf5\x08\x57\xfc\xfa\x27\x97\xf6\x0a\x66\xce\x63\xad\x5e\x81\x03\x3f\x05\xd6\x3a\x02\x2f\x39\xe7\xc9\x0c\x2c\x7b\xc3\x10\xaa\x2d\x6a\x01\xb5\x8d\x60\x20\x44\x74\x81\xc3\x5d\xdd\x47\xb0\x58\xc0\x7b\x88\x5b\x34\x03\x15\x41\x34\x0d\xb4\x8e\xd3\xba\x35\xd5\xa8\x91\x85\x5d\x03\xd7\x61\xd7\xf0\xaf\x5f\x8a\xe1\xa6\x32\x31\x87\xee\xc9\xe0\x17\x25\xa1\x48\x31\xcc\x17\x30\x94\xc2\x7f\xa8\xb8\xbd\x33\x21\x0a\x53\x61\x36\x6e\x7e\xc3\xbe\x77\xd9\xe7\x10\x30\xae\x84\xc6\x90\xe5\x05\x74\xab\x3c\xa7\x44\xd5\x9d\xcc\xc5\x02\x8c\x6a\x92\x2e\xf1\x18\x5b\x6f\x52\x69\xfc\x36\xc1\xea\x8c\x35\x56\x6c\x46\x0c\xcc\xe1\xf2\x85\x75\xf0\x9c\x92\x3d\xa5\xc4\x4d\x4e\xc6\xf7\x3d\xb6\x12\x76\x4d\x01\xef\xa6\xb3\x1b\x6b\x6a\x25\x13\x69\x39\xb5\xfd\x41\xac\x1b\x9c\x03\xb0\xb5\x8d\x8f\x43\x5f\x58\x41\x09\xb9\x8f\x22\xa2\x46\x13\x1f\x94\x46\xdb\xc6\x39\xa4\x11\xe5\x4b\x65\xda\x88\x05\x25\xfb\xff\x95\x80\xde\xf7\x0e\xf5\xe4\x70\xd0\xe6\x2b\x7c\x39\xf2\x48\x09\x61\x6f\x53\xc1\x0a\x08\x89\xce\x9c\x7c\x65\x05\xb8\x73\xfb\x54\x79\x4c\x0f\xda\x43\xac\x3f\xe9\x94\x1a\x87\xe0\x22\x0d\x41\x12\x19\x64\x93\x33\x7e\x9f\x8e\xb2\x2e\x21\xff\xf4\x27\xed\x6f\xb8\x5e\xeb\x72\x33\x70\xba\xe5\x88\x23\xfb\x37\x8b\x46\x35\x89\x7f\x04\xfb\xee\xb2\x53\x88\xaa\xe1\xa2\xff\x27\xf0\xbb\x90\xa1\xf7\xc5\xd4\xb0\x5b\xef\x57\xf6\x66\x2b\x8c\xc4\xfc\x9f\x86\x5a\x77\x54\x72\x62\xee\xe9\xa1\x8b\x3d\xfd\x1d\x00\x00\xff\xff\xbc\x4f\x37\x5c\xa2\x04\x00\x00")

func migrateGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateGo,
		"migrate.go",
	)
}

func migrateGo() (*asset, error) {
	bytes, err := migrateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate.go", size: 1186, mode: os.FileMode(420), modTime: time.Unix(1596284373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_add_schema.down.sql":    _000001_add_schemaDownSql,
	"000001_add_schema.up.sql":      _000001_add_schemaUpSql,
	"000002_chats_with_me.down.sql": _000002_chats_with_meDownSql,
	"000002_chats_with_me.up.sql":   _000002_chats_with_meUpSql,
	"000003_unique_person.down.sql": _000003_unique_personDownSql,
	"000003_unique_person.up.sql":   _000003_unique_personUpSql,
	"bindata.go":                    bindataGo,
	"migrate.go":                    migrateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_add_schema.down.sql":    &bintree{_000001_add_schemaDownSql, map[string]*bintree{}},
	"000001_add_schema.up.sql":      &bintree{_000001_add_schemaUpSql, map[string]*bintree{}},
	"000002_chats_with_me.down.sql": &bintree{_000002_chats_with_meDownSql, map[string]*bintree{}},
	"000002_chats_with_me.up.sql":   &bintree{_000002_chats_with_meUpSql, map[string]*bintree{}},
	"000003_unique_person.down.sql": &bintree{_000003_unique_personDownSql, map[string]*bintree{}},
	"000003_unique_person.up.sql":   &bintree{_000003_unique_personUpSql, map[string]*bintree{}},
	"bindata.go":                    &bintree{bindataGo, map[string]*bintree{}},
	"migrate.go":                    &bintree{migrateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
