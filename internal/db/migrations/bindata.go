// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_add_schema.down.sql
// 000001_add_schema.up.sql
// 000002_chats_with_me.down.sql
// 000002_chats_with_me.up.sql
// 000003_unique_person.down.sql
// 000003_unique_person.up.sql
// bindata.go
// migrate.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_add_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\x06\x04\x00\x00\xff\xff\xc5\x72\xd3\x4e\x22\x00\x00\x00")

func _000001_add_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaDownSql,
		"000001_add_schema.down.sql",
	)
}

func _000001_add_schemaDownSql() (*asset, error) {
	bytes, err := _000001_add_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.down.sql", size: 34, mode: os.FileMode(420), modTime: time.Unix(1614497273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_add_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x4b\x6b\x84\x40\x10\x84\xef\xf3\x2b\xea\xb8\xc2\x12\x72\xdf\xd3\xac\x69\x93\x21\xb3\x93\x30\x33\x42\x3c\x89\x1a\x21\x5e\x54\xe6\x41\xfe\x7e\xf0\x81\xe6\x05\x09\x7b\xeb\xa2\xaa\x8b\xaf\x3b\xd5\xc4\x2d\xc1\xa4\x0f\x74\xe1\x10\x19\xd4\x93\x05\xbd\x08\x63\x0d\xea\x21\x9c\x18\x5b\x13\x96\x9f\x25\xfd\x0c\xdc\x8c\xad\xf3\x43\xef\x71\x60\x00\xb0\xa8\xb2\x7b\x85\x21\x2d\xb8\xc4\xb3\x16\x17\xae\x0b\x3c\x52\x71\x9c\x13\xd1\xb7\x6e\xf2\xcf\xe2\x5e\x28\x3b\xb7\xa9\x5c\xca\xc5\x6c\xde\xaa\xf0\x8b\xc9\x92\xbf\x39\xde\x2b\xb7\x51\x4c\x73\xb9\xa3\xac\x6d\x9f\x50\xa0\x29\x23\x4d\x2a\xa5\x2f\x47\x1c\xb6\x9d\xe4\xb8\x17\x35\x43\xec\xc3\xa4\xbe\x63\xe1\x8e\x32\x9e\x4b\x8b\xdb\xff\x00\xfa\x58\xfb\xc6\x75\x63\xe8\xf6\x77\xf9\x58\x5f\x0b\xc8\x92\xd3\x47\x00\x00\x00\xff\xff\x49\x14\x81\xe0\xbc\x01\x00\x00")

func _000001_add_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaUpSql,
		"000001_add_schema.up.sql",
	)
}

func _000001_add_schemaUpSql() (*asset, error) {
	bytes, err := _000001_add_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.up.sql", size: 444, mode: os.FileMode(420), modTime: time.Unix(1614497273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_chats_with_meDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xd1\x4b\xce\x48\x2c\x29\xb6\x06\x04\x00\x00\xff\xff\x3f\x15\x09\x09\x1f\x00\x00\x00")

func _000002_chats_with_meDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_chats_with_meDownSql,
		"000002_chats_with_me.down.sql",
	)
}

func _000002_chats_with_meDownSql() (*asset, error) {
	bytes, err := _000002_chats_with_meDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_chats_with_me.down.sql", size: 31, mode: os.FileMode(420), modTime: time.Unix(1614497273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_chats_with_meUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xd1\x4b\xce\x48\x2c\x29\x56\xd0\xe0\x52\x50\x50\x50\x00\xb1\xe3\x33\x53\x14\x9c\x3c\xdd\x3d\xfd\x42\x14\x02\x82\x3c\x7d\x1d\x83\x22\x15\xbc\x5d\x23\xb9\x34\xad\x01\x01\x00\x00\xff\xff\x64\x9c\xb6\x4b\x48\x00\x00\x00")

func _000002_chats_with_meUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_chats_with_meUpSql,
		"000002_chats_with_me.up.sql",
	)
}

func _000002_chats_with_meUpSql() (*asset, error) {
	bytes, err := _000002_chats_with_meUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_chats_with_me.up.sql", size: 72, mode: os.FileMode(420), modTime: time.Unix(1614497273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_unique_personDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x50\xca\x4c\xa9\x88\x2f\xcd\xcb\x2c\x2c\x4d\x8d\x2f\x48\x2d\x2a\xce\xcf\x53\xb2\x06\x04\x00\x00\xff\xff\x57\xfb\xa6\x74\x29\x00\x00\x00")

func _000003_unique_personDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_unique_personDownSql,
		"000003_unique_person.down.sql",
	)
}

func _000003_unique_personDownSql() (*asset, error) {
	bytes, err := _000003_unique_personDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_unique_person.down.sql", size: 41, mode: os.FileMode(420), modTime: time.Unix(1614497273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_unique_personUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\xf5\xf3\x0c\x0c\x75\x55\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x50\xca\x4c\xa9\x88\x2f\xcd\xcb\x2c\x2c\x4d\x8d\x2f\x48\x2d\x2a\xce\xcf\x53\x52\xf0\xf7\x53\x48\xca\x2f\xd1\x83\x70\x8b\x15\x34\x4a\x8b\x53\x8b\xe2\x33\x53\x74\x92\x33\x12\x4b\xe2\x33\x53\x34\xad\x01\x01\x00\x00\xff\xff\xed\xec\x5a\xda\x57\x00\x00\x00")

func _000003_unique_personUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_unique_personUpSql,
		"000003_unique_person.up.sql",
	)
}

func _000003_unique_personUpSql() (*asset, error) {
	bytes, err := _000003_unique_personUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_unique_person.up.sql", size: 87, mode: os.FileMode(420), modTime: time.Unix(1614497273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\xdb\x46\x13\x7d\x26\x7f\xc5\x46\x40\x02\xf2\x83\x3e\x89\x57\x91\x14\x60\xa0\x48\x9c\x02\x79\x68\x52\x34\xc9\x53\xa7\x10\x96\xe4\xae\x4c\x54\x22\x65\x92\x8a\x47\x36\xfc\xdf\x8b\xd9\xa1\x14\xf9\x22\xbb\x30\x12\x54\x00\x45\xee\x65\xce\xcc\x9c\x9d\x39\xa2\xa6\x53\xf1\xae\x29\x95\x58\xaa\x5a\xb5\xb2\x57\xa5\xc8\x77\x62\xd9\xfc\x3f\xaf\xea\x52\xf6\x72\x22\x9c\x5f\x0e\x4b\xae\x38\xff\x24\x3e\x7e\xfa\x22\xde\x9f\x7f\xf8\x32\xb1\x6d\x31\x9d\xfe\x2e\x8b\xbf\xe5\x52\x89\x75\xb5\x6c\x65\x5f\x35\x75\x77\x12\x69\x3a\x15\x5d\xb3\x6d\x0b\xd5\xcd\xed\xe9\x54\x78\xf4\xf1\x17\xb2\x2c\x17\x5d\x71\xa1\xd6\x72\x52\x36\x57\xf5\xa4\xbb\x5c\x3d\xbe\xba\xdd\xdc\x59\x0b\x16\xc5\x85\xec\xbb\xc5\x55\xd5\x5f\x2c\xd6\xea\xa1\xf1\xfd\x0d\xf7\xec\xc3\xc5\xb6\xae\x2e\xb7\x6a\xb1\x51\x6d\xd7\xd4\x0f\xed\xef\x6f\xf8\x6e\xbf\x4f\x68\xd9\xd0\x88\x33\x57\x34\xda\x3c\x20\xc3\xb6\xab\xf5\xa6\x69\x7b\xe1\xd8\xd6\x28\xdf\xf5\xaa\x1b\xd9\xd6\xa8\x68\xd6\x9b\x56\x75\xdd\x74\x79\x5d\x6d\x68\x42\xaf\x7b\xba\x55\x0d\x7f\x4f\xab\x66\xdb\x57\x2b\x1a\x34\xc6\x60\x23\xfb\x8b\xa9\xae\x56\x8a\x1e\x68\xa2\xeb\xdb\xaa\x5e\x9a\xb5\xbe\x5a\xab\x91\xed\xda\xb6\xde\xd6\xc5\x3e\xb6\x3f\x94\x2c\x1d\x7a\x10\x7f\xfe\x45\x6e\xc7\xa2\x96\x6b\x25\xd8\xcc\x15\xce\x7e\x56\xb5\x6d\xd3\xba\xe2\xc6\xb6\x96\xd7\x66\x24\xe6\x67\x82\xa2\x9a\x7c\x54\x57\x04\xa2\x5a\xc7\x84\x4d\xe3\xb7\x5b\xad\x55\x6b\x60\x5d\xd7\xb6\x2a\x6d\x0c\x5e\x9d\x89\xba\x5a\x11\x84\xd5\xaa\x7e\xdb\xd6\x34\x1c\x0b\xbd\xee\x27\xef\x09\x5d\x3b\xa3\x56\xc9\x52\xbc\xbe\x9c\x8b\xd7\xdf\x46\x1c\x89\xf1\xe5\xda\xd6\xad\x6d\x5b\xdf\x64\x2b\xf2\xad\x16\xec\x87\x9d\xd8\xd6\x82\xc3\x39\x13\x55\x33\x79\xd7\x6c\x76\xce\x9b\x7c\xab\xc7\x62\x79\xed\xda\x56\xb1\x7a\xbf\x8f\x74\xf2\x6e\xd5\x74\xca\x71\xed\x1f\x15\x0f\xc1\x30\xfe\x09\x20\xd5\xb6\x1c\xf7\x30\x99\x6f\xf5\xe4\x2d\x85\xee\xb8\x63\xda\x61\xdf\xda\x76\xbf\xdb\x28\x21\xbb\x4e\xf5\x44\xf9\xb6\xe8\x09\xc5\xe4\x37\x9c\x87\x6d\x55\xb5\x6e\x84\x68\xba\xc9\xaf\xd5\x4a\x7d\xa8\x75\x73\xb0\x1b\x8e\x70\x3f\x7f\x84\x60\xce\x50\x88\xe1\x18\x6d\xab\xab\xae\xcd\xb8\xaa\xfb\x59\x64\x5b\x6b\xea\x63\x71\x00\xfd\xad\x29\x95\x99\xfc\x52\xad\x95\xa0\x32\x99\xd0\x13\xf9\x99\x4e\xc5\x47\xc2\x1a\x52\xa0\xca\x32\x34\x70\x0d\x39\xba\xba\x1f\x84\x6b\xf6\x3b\xee\xe0\x9a\x82\x39\xd8\x4e\x8c\x25\xa3\x7e\xa6\x88\x8e\x51\x29\xc4\x27\x50\x69\xbf\xe3\x72\x02\x77\x41\x8d\x21\x83\x52\x22\x77\x40\x29\xd1\x27\x40\x69\xbf\xe3\x1e\xd3\x70\x17\xda\x98\x1f\xa0\x0d\x3b\xf7\xd0\x2b\xbd\x33\x84\x3d\xed\x84\x2c\x1d\xf7\x3b\xb3\x0f\xbc\x1c\xd1\xfd\xa1\x3b\xaf\xda\x3b\x6e\xae\x2e\x54\x7f\xa1\x5a\x21\x45\x59\xb5\xaa\xe8\x9b\x76\xf7\x84\x3b\x63\xef\xb8\x22\x6f\x9a\xd5\xc3\x6c\xde\x34\xdd\x84\xf2\x24\x1f\xaf\xce\x84\xb7\x3f\x8d\x5d\x77\xc7\x65\xd5\x89\x6e\xd7\x3d\x47\xdf\xe7\x5d\xc7\x47\xa2\x5a\x2d\x0b\x75\x73\x7b\xe4\x6f\xa8\x6f\x6a\xd9\xc5\xe2\x81\x46\x9f\x37\x57\xf5\xe7\xcb\x95\x38\x1b\xaa\xdc\x19\x01\xfa\x1a\x30\xcd\x01\xbd\x14\xd0\xf3\x1e\xbf\xb4\x06\x4c\x02\x40\x2f\x03\xd4\x74\xd7\x80\xb1\xc7\x36\xc9\x0c\x50\xcf\x00\x13\xda\x17\x03\x26\x31\x60\x1c\x01\x6a\x0f\x30\x89\x00\xe3\x90\xd7\xd2\x92\xe7\xbc\x02\xd0\x53\x8c\x15\xcf\x00\xa3\x14\xb0\x90\x80\x01\x61\xfa\xbc\x97\x30\x69\x1f\xdd\xcd\x15\x01\x26\x3e\x60\x1e\x03\x7a\xb4\x16\xdd\x8d\x8d\xae\x22\xe6\x18\xcb\x10\x30\x52\x80\x41\x70\x9c\xc3\x68\xaf\xbf\x27\x49\x19\x24\xe2\x31\xe9\xdd\x0b\xc9\x91\x74\xdb\x96\x75\x9a\xdf\xb1\x6d\x59\xa3\xd3\x3f\x9f\xa3\xb1\x6d\xb9\x74\x4a\x4f\x07\x44\xb1\xfc\xcf\x68\xd4\x71\x2c\x46\xa4\x0e\xbf\x04\xcf\x65\xf3\x9c\xe8\x1e\xb4\xd2\xa8\xdd\xfc\xec\x7e\xb1\xdd\x90\x74\xcc\xc5\x93\xc9\x18\x09\x99\x8b\x30\x1a\x9b\xc2\x9d\x1f\xf7\xb5\x13\x05\x9e\x6b\xe6\xa9\xd5\xe6\xdc\x8a\x5f\xeb\x0a\x1d\x7f\xe6\x47\x51\x96\x04\x49\x38\x16\x9e\x7b\x6b\x5b\x92\xdc\xbf\x31\xf9\xde\x98\x24\xe7\x62\xc8\x95\x62\x9b\x9b\xef\xdb\xc3\x59\xc8\xf1\x33\xa5\xfe\x75\xf3\xd2\x42\xcf\x0a\xc0\xcc\x03\x8c\x72\xc0\x59\x0e\x98\x46\x80\x91\x07\xe8\x7b\xfc\xac\xa8\xe0\x42\xc0\x20\x07\x54\x12\x30\xa7\x02\x0e\x00\xfd\x60\x28\x40\xcd\x45\x28\x0b\xc0\x59\x06\x98\xd1\x5e\x2a\xde\x90\x9f\x43\x0f\x30\xa4\x22\x0d\x00\xc3\x02\x30\xcd\x00\x7d\xc9\x7b\x62\xc5\xcd\xa3\xa8\x31\x7c\x40\xad\x00\x13\xc5\x8d\x93\xfa\x3c\xef\xc5\xdc\x3c\x09\xf9\xcf\x01\x65\x00\x28\x25\xe7\x26\x35\x60\x98\x03\x96\x31\x60\x11\x01\x06\x25\x60\xe1\x03\xca\x88\x9b\x96\x1a\x49\xf9\x9c\x8b\x9f\x01\x96\x11\xc7\x44\x98\x79\xc9\xdc\xcc\x68\x5c\x72\x6e\x14\x13\xf1\xe1\xa7\x80\x71\x0e\xe8\x53\x0e\x33\xc0\x4c\x03\x06\x31\xa0\x2e\xb9\x51\x4b\xca\xa3\x00\x94\x25\x73\x13\x85\xcc\x13\x35\xed\x6c\xe0\x36\xf7\x00\x65\x0a\x98\x07\x1c\x7b\x1a\x33\x3e\xc5\x68\x38\x8c\x98\x23\x7f\x06\xe8\x27\x80\x92\x44\x22\x67\x8e\xe2\x80\xb1\x4c\x2c\x21\x60\x49\x7c\x26\x80\x33\xc5\x82\x54\x68\x40\x15\x30\x7f\x41\xca\x1c\xd0\xba\x24\x91\x29\x58\x60\x48\x20\x66\x14\xab\x62\xbe\x0c\xa7\x39\x60\x41\x67\x14\x00\xe6\xc4\x5d\xc6\xeb\xc1\x60\x4f\x82\x14\x91\x10\x85\x80\x79\x06\x28\xf7\xe7\x5a\x32\x07\x24\x82\xd2\x03\x0c\x32\xc0\x80\xf2\x2e\x01\x03\x09\x28\x63\x16\xb4\x28\x01\xf4\x0b\xc0\x9c\x38\x23\x4e\x23\xce\x95\xf2\x0b\xe3\x81\x27\x8a\x2f\xe4\x33\xca\x15\xf3\x4f\x67\x94\x2a\xc0\x30\x00\xcc\x14\xd7\x22\xc5\x5a\xe6\x5c\xa3\xa6\x56\x25\x60\x9c\x02\x6a\xca\x61\xc6\xc2\x6b\x6c\xd3\x41\x90\x13\x40\x9d\xf1\x9e\x58\x33\x97\x45\xca\xb9\x1a\x91\x4c\x1e\xd6\x3e\x5d\x11\xd5\x63\x34\xd4\x1b\x9d\x1b\x09\xb6\xff\x2f\x84\xd4\xb4\xdc\x8f\x90\x51\x03\x74\x42\x44\xf9\x2d\xff\x39\x09\x35\x08\x2f\x13\xd0\xe3\x2c\x7e\x9e\x7c\xee\xd3\x18\xc4\x33\x8a\xfe\x7b\xf5\xbc\xf7\x7f\xec\xa7\xbc\x2b\xf8\x2c\x41\x7a\x68\xe7\x38\x7e\xd9\x7b\x02\xb5\x3f\xb5\x44\xa1\x78\x3e\x28\xb8\x05\xa9\xcd\x4e\xbd\x1f\x84\x1a\xd0\x1f\xa4\x93\x2e\x5f\x3f\xf1\x7e\xf0\x38\x17\x2f\xad\xed\xc7\xd1\xbe\x17\xf8\xa9\xbf\xca\xa6\xca\xff\x09\x00\x00\xff\xff\xab\x86\xb3\x87\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1614497694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x3d\x6f\xdb\x30\x10\x86\x67\xf2\x57\x5c\x08\xa4\x91\x02\x99\x2a\xd0\x4e\x2e\x3c\xb4\x69\x86\x0c\xf6\xd0\xa4\xe8\x52\x20\xa0\xe5\x13\x4d\x44\xfc\x30\x49\x25\x01\x0a\xff\xf7\x82\xfa\x8a\x5d\xb7\x85\x27\x1d\xc9\xe3\xfb\xbc\x77\x3c\xc8\x89\xea\x49\x48\x04\xad\xa4\x17\x51\x59\x13\x28\x55\xda\x59\x1f\x21\xa3\x84\x6d\x44\x14\x6b\x11\xb0\x0c\xbb\x86\x51\xc2\xd0\x7b\xeb\x43\x8a\x6a\x1d\xd3\x27\x2a\x8d\x8c\x52\xc2\xa4\x8a\xdb\x76\xcd\x2b\xab\x4b\x69\x1b\x61\xe4\xac\x97\xc4\x72\xfc\x3e\x7f\x64\x67\xe6\x95\x13\xd6\xd9\x10\xa5\xc7\x44\x5c\x2b\x93\xb6\xe1\x3c\x85\x60\x5b\x5f\x61\x29\xed\xe3\x70\x8f\xd1\x9c\xd2\xb2\x94\x76\x2e\xd1\x60\x4a\x03\x69\xc1\xb7\x06\x8e\xf4\x66\x43\xfa\x61\xf8\xfc\xe1\x60\x05\x33\xf7\x24\x0f\xda\x05\x33\x25\x8d\xf5\x08\x57\xfc\xfa\x27\x97\xf6\x0a\x66\xce\x63\xad\x5e\x81\x03\x3f\x05\xd6\x3a\x02\x2f\x39\xe7\xc9\x0c\x2c\x7b\xc3\x10\xaa\x2d\x6a\x01\xb5\x8d\x60\x20\x44\x74\x81\xc3\x5d\xdd\x47\xb0\x58\xc0\x7b\x88\x5b\x34\x03\x15\x41\x34\x0d\xb4\x8e\xd3\xba\x35\xd5\xa8\x91\x85\x5d\x03\xd7\x61\xd7\xf0\xaf\x5f\x8a\xe1\xa6\x32\x31\x87\xee\xc9\xe0\x17\x25\xa1\x48\x31\xcc\x17\x30\x94\xc2\x7f\xa8\xb8\xbd\x33\x21\x0a\x53\x61\x36\x6e\x7e\xc3\xbe\x77\xd9\xe7\x10\x30\xae\x84\xc6\x90\xe5\x05\x74\xab\x3c\xa7\x44\xd5\x9d\xcc\xc5\x02\x8c\x6a\x92\x2e\xf1\x18\x5b\x6f\x52\x69\xfc\x36\xc1\xea\x8c\x35\x56\x6c\x46\x0c\xcc\xe1\xf2\x85\x75\xf0\x9c\x92\x3d\xa5\xc4\x4d\x4e\xc6\xf7\x3d\xb6\x12\x76\x4d\x01\xef\xa6\xb3\x1b\x6b\x6a\x25\x13\x69\x39\xb5\xfd\x41\xac\x1b\x9c\x03\xb0\xb5\x8d\x8f\x43\x5f\x58\x41\x09\xb9\x8f\x22\xa2\x46\x13\x1f\x94\x46\xdb\xc6\x39\xa4\x11\xe5\x4b\x65\xda\x88\x05\x25\xfb\xff\x95\x80\xde\xf7\x0e\xf5\xe4\x70\xd0\xe6\x2b\x7c\x39\xf2\x48\x09\x61\x6f\x53\xc1\x0a\x08\x89\xce\x9c\x7c\x65\x05\xb8\x73\xfb\x54\x79\x4c\x0f\xda\x43\xac\x3f\xe9\x94\x1a\x87\xe0\x22\x0d\x41\x12\x19\x64\x93\x33\x7e\x9f\x8e\xb2\x2e\x21\xff\xf4\x27\xed\x6f\xb8\x5e\xeb\x72\x33\x70\xba\xe5\x88\x23\xfb\x37\x8b\x46\x35\x89\x7f\x04\xfb\xee\xb2\x53\x88\xaa\xe1\xa2\xff\x27\xf0\xbb\x90\xa1\xf7\xc5\xd4\xb0\x5b\xef\x57\xf6\x66\x2b\x8c\xc4\xfc\x9f\x86\x5a\x77\x54\x72\x62\xee\xe9\xa1\x8b\x3d\xfd\x1d\x00\x00\xff\xff\xbc\x4f\x37\x5c\xa2\x04\x00\x00")

func migrateGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateGo,
		"migrate.go",
	)
}

func migrateGo() (*asset, error) {
	bytes, err := migrateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate.go", size: 1186, mode: os.FileMode(420), modTime: time.Unix(1614497663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_add_schema.down.sql":    _000001_add_schemaDownSql,
	"000001_add_schema.up.sql":      _000001_add_schemaUpSql,
	"000002_chats_with_me.down.sql": _000002_chats_with_meDownSql,
	"000002_chats_with_me.up.sql":   _000002_chats_with_meUpSql,
	"000003_unique_person.down.sql": _000003_unique_personDownSql,
	"000003_unique_person.up.sql":   _000003_unique_personUpSql,
	"bindata.go":                    bindataGo,
	"migrate.go":                    migrateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_add_schema.down.sql":    &bintree{_000001_add_schemaDownSql, map[string]*bintree{}},
	"000001_add_schema.up.sql":      &bintree{_000001_add_schemaUpSql, map[string]*bintree{}},
	"000002_chats_with_me.down.sql": &bintree{_000002_chats_with_meDownSql, map[string]*bintree{}},
	"000002_chats_with_me.up.sql":   &bintree{_000002_chats_with_meUpSql, map[string]*bintree{}},
	"000003_unique_person.down.sql": &bintree{_000003_unique_personDownSql, map[string]*bintree{}},
	"000003_unique_person.up.sql":   &bintree{_000003_unique_personUpSql, map[string]*bintree{}},
	"bindata.go":                    &bintree{bindataGo, map[string]*bintree{}},
	"migrate.go":                    &bintree{migrateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
