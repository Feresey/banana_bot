// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_add_schema.down.sql
// 000001_add_schema.up.sql
// bindata.go
// migrate.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_add_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\xb1\x06\x04\x00\x00\xff\xff\x30\xb7\xe0\x82\x1a\x00\x00\x00")

func _000001_add_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaDownSql,
		"000001_add_schema.down.sql",
	)
}

func _000001_add_schemaDownSql() (*asset, error) {
	bytes, err := _000001_add_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.down.sql", size: 26, mode: os.FileMode(420), modTime: time.Unix(1595788375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_add_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xce\x3f\x4b\xc5\x30\x14\x05\xf0\x3d\x9f\xe2\x8c\xaf\xe0\xe0\xfe\xa6\x58\x6f\x35\x98\x17\x25\x49\xc1\x4e\xd2\x7f\x60\x96\xa6\x24\x29\x7e\x7d\x21\x2d\xa5\x14\xd1\xc1\xbb\x9e\xcb\x39\xbf\x52\x13\xb7\x04\x53\x3e\xd3\x8d\x43\x54\x50\xaf\x16\xf4\x2e\x8c\x35\xe8\x7c\xba\x32\xb6\x7d\x58\xfe\x20\xe9\xf4\x30\x8f\x21\xfa\x29\xe2\xc2\x00\xc0\x0d\xc8\x67\x48\x0b\x2e\xf1\xa6\xc5\x8d\xeb\x06\x2f\xd4\xdc\xe5\x7c\x89\x63\xf8\x70\x03\x84\xb2\xf4\x44\x3a\x17\xa9\x5a\xca\x35\xed\x3f\xdb\xf4\x53\xca\x8a\xdf\x0d\x5f\x6d\xd8\x05\xab\xe7\xd8\x72\x40\x40\x53\x45\x9a\x54\x49\x3b\xfc\xe2\x86\x62\x5b\xf7\xcb\x94\xb2\xfe\xbc\x8f\x47\xaa\x78\x2d\x2d\xee\xff\x92\xc4\xa5\x8b\x7d\x70\x73\x72\xfe\x9f\xa2\xe2\xfa\x1d\x00\x00\xff\xff\xa2\xc3\xef\x2e\x97\x01\x00\x00")

func _000001_add_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaUpSql,
		"000001_add_schema.up.sql",
	)
}

func _000001_add_schemaUpSql() (*asset, error) {
	bytes, err := _000001_add_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.up.sql", size: 407, mode: os.FileMode(420), modTime: time.Unix(1595788341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1595789569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x6e\xdb\x3c\x10\x3c\x73\x9f\x62\xc3\xc3\x17\x29\x90\xa9\x0f\x68\x4f\x06\x7c\xe8\xcf\x25\x07\xe7\xd0\xa4\xe8\xa5\x40\x40\xab\x2b\x9a\x88\xf8\x63\x72\x95\x06\x28\xfc\xee\x05\x6d\x59\xb1\xd1\x8b\x4f\x5a\xee\x0e\x67\x86\x3b\x8a\xba\x7b\xd1\x86\xd0\x59\x93\x34\xdb\xe0\x33\x80\x75\x31\x24\xc6\x0a\x84\xfc\xa5\x59\x6f\x74\xa6\x36\xef\x06\x09\x42\xb2\x75\x24\x01\x84\x34\x96\xb7\xe3\x46\x75\xc1\xb5\x26\x0c\xda\x9b\xc5\x91\x81\xda\xd3\xf7\xf5\xa3\xbc\x12\xd7\xce\x2a\x31\x64\x36\x89\xb2\x04\xb1\xb1\xbe\xb4\xf1\x3a\x86\x1c\xc6\xd4\x51\x6b\xc2\xf3\x74\x4f\x42\x0d\xd0\xb6\x26\x2c\x0d\x79\x2a\x30\x34\x01\xd3\xe8\xf1\x82\x6f\x31\xc1\xcf\xcb\xd7\x0f\x67\x27\x5c\xc4\x17\x73\xb6\x1d\x5c\x58\xe3\x43\x22\xbc\x55\x77\x3f\x95\x09\xb7\xb8\x88\x89\x7a\xfb\x86\x0a\xd5\xbf\x82\xbd\x63\x54\xad\x52\xaa\x98\xc1\xf5\xd1\x30\xe6\x6e\x4b\x4e\x63\x1f\x18\x3d\x66\xa6\x98\x15\xde\xf7\xc7\x0a\x57\x2b\xfc\x1f\x79\x4b\x7e\x52\x25\xd4\xc3\x80\x63\x54\xd0\x8f\xbe\x3b\x71\x54\x79\x37\xe0\x5d\xde\x0d\xea\xeb\xe7\x66\xba\x69\x3d\xd7\x48\x29\x85\x84\x7f\x40\xe4\xa6\xd4\xb8\x5c\xe1\xf4\x14\xf5\xc3\xf2\xf6\xde\x67\xd6\xbe\xa3\xea\xd4\xfc\x46\xc7\xdd\x55\x9f\x72\x26\x7e\xd0\x8e\x72\x55\x37\x78\x38\xd5\x35\x08\xdb\x1f\x68\x6e\x56\xe8\xed\x50\x78\x45\x22\x1e\x93\x2f\x5d\x10\x7b\x00\x11\x67\xa1\x53\x7c\x97\x4a\x79\x37\x34\xf8\xdf\x3c\xfb\x12\x7c\x6f\x4d\x21\x5a\xcf\x5b\x7d\xd2\x9b\x81\x96\x88\x72\x13\xf8\x79\x7a\xb6\x6c\x40\x88\x47\xd6\x4c\x8e\x3c\x3f\x59\x47\x61\xe4\x25\x96\x3f\x50\xad\xad\x1f\x99\x1a\x10\xfb\xab\x1c\xba\xd9\xe1\xc4\xad\x1e\xe8\xf7\x85\x47\x10\x42\xbe\x87\x2e\x1b\xcc\x45\x5d\x46\xf3\x26\x1b\x8c\x57\x89\xd8\x53\x80\x37\x25\xc0\x33\x84\x53\x8f\xa5\x5f\x1d\xa6\x75\x01\xbf\x4f\xbe\xc7\xaa\x86\x3d\xfc\x0d\x00\x00\xff\xff\x4c\x11\x66\x1f\x86\x03\x00\x00")

func migrateGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateGo,
		"migrate.go",
	)
}

func migrateGo() (*asset, error) {
	bytes, err := migrateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate.go", size: 902, mode: os.FileMode(420), modTime: time.Unix(1595789566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_add_schema.down.sql": _000001_add_schemaDownSql,
	"000001_add_schema.up.sql":   _000001_add_schemaUpSql,
	"bindata.go":                 bindataGo,
	"migrate.go":                 migrateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_add_schema.down.sql": &bintree{_000001_add_schemaDownSql, map[string]*bintree{}},
	"000001_add_schema.up.sql":   &bintree{_000001_add_schemaUpSql, map[string]*bintree{}},
	"bindata.go":                 &bintree{bindataGo, map[string]*bintree{}},
	"migrate.go":                 &bintree{migrateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
