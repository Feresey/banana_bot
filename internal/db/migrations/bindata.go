// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package migrations generated by go-bindata.// sources:
// 000001_add_schema.down.sql
// 000001_add_schema.up.sql
// bindata.go
// migrate.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_add_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\x2f\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\x06\x04\x00\x00\xff\xff\xc5\x72\xd3\x4e\x22\x00\x00\x00")

func _000001_add_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaDownSql,
		"000001_add_schema.down.sql",
	)
}

func _000001_add_schemaDownSql() (*asset, error) {
	bytes, err := _000001_add_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.down.sql", size: 34, mode: os.FileMode(420), modTime: time.Unix(1596286483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_add_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x4b\x6b\x84\x40\x10\x84\xef\xf3\x2b\xea\xb8\xc2\x12\x72\xdf\xd3\xac\x69\x93\x21\xb3\x93\x30\x33\x42\x3c\x89\x1a\x21\x5e\x54\xe6\x41\xfe\x7e\xf0\x81\xe6\x05\x09\x7b\xeb\xa2\xaa\x8b\xaf\x3b\xd5\xc4\x2d\xc1\xa4\x0f\x74\xe1\x10\x19\xd4\x93\x05\xbd\x08\x63\x0d\xea\x21\x9c\x18\x5b\x13\x96\x9f\x25\xfd\x0c\xdc\x8c\xad\xf3\x43\xef\x71\x60\x00\xb0\xa8\xb2\x7b\x85\x21\x2d\xb8\xc4\xb3\x16\x17\xae\x0b\x3c\x52\x71\x9c\x13\xd1\xb7\x6e\xf2\xcf\xe2\x5e\x28\x3b\xb7\xa9\x5c\xca\xc5\x6c\xde\xaa\xf0\x8b\xc9\x92\xbf\x39\xde\x2b\xb7\x51\x4c\x73\xb9\xa3\xac\x6d\x9f\x50\xa0\x29\x23\x4d\x2a\xa5\x2f\x47\x1c\xb6\x9d\xe4\xb8\x17\x35\x43\xec\xc3\xa4\xbe\x63\xe1\x8e\x32\x9e\x4b\x8b\xdb\xff\x00\xfa\x58\xfb\xc6\x75\x63\xe8\xf6\x77\xf9\x58\x5f\x0b\xc8\x92\xd3\x47\x00\x00\x00\xff\xff\x49\x14\x81\xe0\xbc\x01\x00\x00")

func _000001_add_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_schemaUpSql,
		"000001_add_schema.up.sql",
	)
}

func _000001_add_schemaUpSql() (*asset, error) {
	bytes, err := _000001_add_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_schema.up.sql", size: 444, mode: os.FileMode(420), modTime: time.Unix(1596291645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1596293233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x3d\x6f\xdb\x30\x10\x86\x67\xf2\x57\x5c\x08\xa4\x91\x02\x99\x2a\xd0\x4e\x2e\x3c\xb4\x69\x86\x0c\xf6\xd0\xa4\xe8\x52\x20\xa0\xe5\x13\x4d\x44\xfc\x30\x49\x25\x01\x0a\xff\xf7\x82\xfa\x8a\x5d\xb7\x85\x27\x1d\xc9\xe3\xfb\xbc\x77\x3c\xc8\x89\xea\x49\x48\x04\xad\xa4\x17\x51\x59\x13\x28\x55\xda\x59\x1f\x21\xa3\x84\x6d\x44\x14\x6b\x11\xb0\x0c\xbb\x86\x51\xc2\xd0\x7b\xeb\x43\x8a\x6a\x1d\xd3\x27\x2a\x8d\x8c\x52\xc2\xa4\x8a\xdb\x76\xcd\x2b\xab\x4b\x69\x1b\x61\xe4\xac\x97\xc4\x72\xfc\x3e\x7f\x64\x67\xe6\x95\x13\xd6\xd9\x10\xa5\xc7\x44\x5c\x2b\x93\xb6\xe1\x3c\x85\x60\x5b\x5f\x61\x29\xed\xe3\x70\x8f\xd1\x9c\xd2\xb2\x94\x76\x2e\xd1\x60\x4a\x03\x69\xc1\xb7\x06\x8e\xf4\x66\x43\xfa\x61\xf8\xfc\xe1\x60\x05\x33\xf7\x24\x0f\xda\x05\x33\x25\x8d\xf5\x08\x57\xfc\xfa\x27\x97\xf6\x0a\x66\xce\x63\xad\x5e\x81\x03\x3f\x05\xd6\x3a\x02\x2f\x39\xe7\xc9\x0c\x2c\x7b\xc3\x10\xaa\x2d\x6a\x01\xb5\x8d\x60\x20\x44\x74\x81\xc3\x5d\xdd\x47\xb0\x58\xc0\x7b\x88\x5b\x34\x03\x15\x41\x34\x0d\xb4\x8e\xd3\xba\x35\xd5\xa8\x91\x85\x5d\x03\xd7\x61\xd7\xf0\xaf\x5f\x8a\xe1\xa6\x32\x31\x87\xee\xc9\xe0\x17\x25\xa1\x48\x31\xcc\x17\x30\x94\xc2\x7f\xa8\xb8\xbd\x33\x21\x0a\x53\x61\x36\x6e\x7e\xc3\xbe\x77\xd9\xe7\x10\x30\xae\x84\xc6\x90\xe5\x05\x74\xab\x3c\xa7\x44\xd5\x9d\xcc\xc5\x02\x8c\x6a\x92\x2e\xf1\x18\x5b\x6f\x52\x69\xfc\x36\xc1\xea\x8c\x35\x56\x6c\x46\x0c\xcc\xe1\xf2\x85\x75\xf0\x9c\x92\x3d\xa5\xc4\x4d\x4e\xc6\xf7\x3d\xb6\x12\x76\x4d\x01\xef\xa6\xb3\x1b\x6b\x6a\x25\x13\x69\x39\xb5\xfd\x41\xac\x1b\x9c\x03\xb0\xb5\x8d\x8f\x43\x5f\x58\x41\x09\xb9\x8f\x22\xa2\x46\x13\x1f\x94\x46\xdb\xc6\x39\xa4\x11\xe5\x4b\x65\xda\x88\x05\x25\xfb\xff\x95\x80\xde\xf7\x0e\xf5\xe4\x70\xd0\xe6\x2b\x7c\x39\xf2\x48\x09\x61\x6f\x53\xc1\x0a\x08\x89\xce\x9c\x7c\x65\x05\xb8\x73\xfb\x54\x79\x4c\x0f\xda\x43\xac\x3f\xe9\x94\x1a\x87\xe0\x22\x0d\x41\x12\x19\x64\x93\x33\x7e\x9f\x8e\xb2\x2e\x21\xff\xf4\x27\xed\x6f\xb8\x5e\xeb\x72\x33\x70\xba\xe5\x88\x23\xfb\x37\x8b\x46\x35\x89\x7f\x04\xfb\xee\xb2\x53\x88\xaa\xe1\xa2\xff\x27\xf0\xbb\x90\xa1\xf7\xc5\xd4\xb0\x5b\xef\x57\xf6\x66\x2b\x8c\xc4\xfc\x9f\x86\x5a\x77\x54\x72\x62\xee\xe9\xa1\x8b\x3d\xfd\x1d\x00\x00\xff\xff\xbc\x4f\x37\x5c\xa2\x04\x00\x00")

func migrateGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateGo,
		"migrate.go",
	)
}

func migrateGo() (*asset, error) {
	bytes, err := migrateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate.go", size: 1186, mode: os.FileMode(420), modTime: time.Unix(1596284373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_add_schema.down.sql": _000001_add_schemaDownSql,
	"000001_add_schema.up.sql":   _000001_add_schemaUpSql,
	"bindata.go":                 bindataGo,
	"migrate.go":                 migrateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_add_schema.down.sql": &bintree{_000001_add_schemaDownSql, map[string]*bintree{}},
	"000001_add_schema.up.sql":   &bintree{_000001_add_schemaUpSql, map[string]*bintree{}},
	"bindata.go":                 &bintree{bindataGo, map[string]*bintree{}},
	"migrate.go":                 &bintree{migrateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
