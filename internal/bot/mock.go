// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Feresey/banana_bot/internal/bot (interfaces: TelegramAPI)

// Package bot is a generated GoMock package.
package bot

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTelegramAPI is a mock of TelegramAPI interface
type MockTelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramAPIMockRecorder
}

// MockTelegramAPIMockRecorder is the mock recorder for MockTelegramAPI
type MockTelegramAPIMockRecorder struct {
	mock *MockTelegramAPI
}

// NewMockTelegramAPI creates a new mock instance
func NewMockTelegramAPI(ctrl *gomock.Controller) *MockTelegramAPI {
	mock := &MockTelegramAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTelegramAPI) EXPECT() *MockTelegramAPIMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method
func (m *MockTelegramAPI) DeleteMessage(arg0 tgbotapi.DeleteMessageConfig) (tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockTelegramAPIMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockTelegramAPI)(nil).DeleteMessage), arg0)
}

// GetChatMember mocks base method
func (m *MockTelegramAPI) GetChatMember(arg0 tgbotapi.ChatConfigWithUser) (tgbotapi.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMember", arg0)
	ret0, _ := ret[0].(tgbotapi.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMember indicates an expected call of GetChatMember
func (mr *MockTelegramAPIMockRecorder) GetChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).GetChatMember), arg0)
}

// GetUpdatesChan mocks base method
func (m *MockTelegramAPI) GetUpdatesChan(arg0 tgbotapi.UpdateConfig) (tgbotapi.UpdatesChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", arg0)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan
func (mr *MockTelegramAPIMockRecorder) GetUpdatesChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockTelegramAPI)(nil).GetUpdatesChan), arg0)
}

// KickChatMember mocks base method
func (m *MockTelegramAPI) KickChatMember(arg0 tgbotapi.KickChatMemberConfig) (tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickChatMember", arg0)
	ret0, _ := ret[0].(tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickChatMember indicates an expected call of KickChatMember
func (mr *MockTelegramAPIMockRecorder) KickChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).KickChatMember), arg0)
}

// RestrictChatMember mocks base method
func (m *MockTelegramAPI) RestrictChatMember(arg0 tgbotapi.RestrictChatMemberConfig) (tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestrictChatMember", arg0)
	ret0, _ := ret[0].(tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestrictChatMember indicates an expected call of RestrictChatMember
func (mr *MockTelegramAPIMockRecorder) RestrictChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestrictChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).RestrictChatMember), arg0)
}

// Send mocks base method
func (m *MockTelegramAPI) Send(arg0 tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockTelegramAPIMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegramAPI)(nil).Send), arg0)
}

// StopReceivingUpdates mocks base method
func (m *MockTelegramAPI) StopReceivingUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopReceivingUpdates")
}

// StopReceivingUpdates indicates an expected call of StopReceivingUpdates
func (mr *MockTelegramAPIMockRecorder) StopReceivingUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReceivingUpdates", reflect.TypeOf((*MockTelegramAPI)(nil).StopReceivingUpdates))
}
