// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Feresey/banana_bot/internal/bot (interfaces: TelegramAPI,Database)

// Package bot is a generated GoMock package.
package bot

import (
	context "context"
	db "github.com/Feresey/banana_bot/internal/db"
	tgbotapi "github.com/Feresey/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTelegramAPI is a mock of TelegramAPI interface
type MockTelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramAPIMockRecorder
}

// MockTelegramAPIMockRecorder is the mock recorder for MockTelegramAPI
type MockTelegramAPIMockRecorder struct {
	mock *MockTelegramAPI
}

// NewMockTelegramAPI creates a new mock instance
func NewMockTelegramAPI(ctrl *gomock.Controller) *MockTelegramAPI {
	mock := &MockTelegramAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTelegramAPI) EXPECT() *MockTelegramAPIMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method
func (m *MockTelegramAPI) DeleteMessage(arg0 tgbotapi.DeleteMessageConfig) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockTelegramAPIMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockTelegramAPI)(nil).DeleteMessage), arg0)
}

// GetChatMember mocks base method
func (m *MockTelegramAPI) GetChatMember(arg0 tgbotapi.ChatConfigWithUser) (*tgbotapi.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMember", arg0)
	ret0, _ := ret[0].(*tgbotapi.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMember indicates an expected call of GetChatMember
func (mr *MockTelegramAPIMockRecorder) GetChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).GetChatMember), arg0)
}

// GetUpdatesChan mocks base method
func (m *MockTelegramAPI) GetUpdatesChan(arg0 tgbotapi.UpdateConfig) (tgbotapi.UpdatesChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", arg0)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan
func (mr *MockTelegramAPIMockRecorder) GetUpdatesChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockTelegramAPI)(nil).GetUpdatesChan), arg0)
}

// IsMessageToMe mocks base method
func (m *MockTelegramAPI) IsMessageToMe(arg0 *tgbotapi.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMessageToMe", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMessageToMe indicates an expected call of IsMessageToMe
func (mr *MockTelegramAPIMockRecorder) IsMessageToMe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMessageToMe", reflect.TypeOf((*MockTelegramAPI)(nil).IsMessageToMe), arg0)
}

// KickChatMember mocks base method
func (m *MockTelegramAPI) KickChatMember(arg0 tgbotapi.KickChatMemberConfig) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickChatMember", arg0)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickChatMember indicates an expected call of KickChatMember
func (mr *MockTelegramAPIMockRecorder) KickChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).KickChatMember), arg0)
}

// RestrictChatMember mocks base method
func (m *MockTelegramAPI) RestrictChatMember(arg0 tgbotapi.RestrictChatMemberConfig) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestrictChatMember", arg0)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestrictChatMember indicates an expected call of RestrictChatMember
func (mr *MockTelegramAPIMockRecorder) RestrictChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestrictChatMember", reflect.TypeOf((*MockTelegramAPI)(nil).RestrictChatMember), arg0)
}

// Send mocks base method
func (m *MockTelegramAPI) Send(arg0 tgbotapi.Chattable) (*tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(*tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockTelegramAPIMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegramAPI)(nil).Send), arg0)
}

// StopReceivingUpdates mocks base method
func (m *MockTelegramAPI) StopReceivingUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopReceivingUpdates")
}

// StopReceivingUpdates indicates an expected call of StopReceivingUpdates
func (mr *MockTelegramAPIMockRecorder) StopReceivingUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReceivingUpdates", reflect.TypeOf((*MockTelegramAPI)(nil).StopReceivingUpdates))
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockDatabase) Init(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockDatabaseMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDatabase)(nil).Init), arg0)
}

// Report mocks base method
func (m *MockDatabase) Report(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report
func (mr *MockDatabaseMockRecorder) Report(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockDatabase)(nil).Report), arg0, arg1)
}

// Shutdown mocks base method
func (m *MockDatabase) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockDatabaseMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDatabase)(nil).Shutdown), arg0)
}

// Subscribe mocks base method
func (m *MockDatabase) Subscribe(arg0 context.Context, arg1 *db.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockDatabaseMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockDatabase)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method
func (m *MockDatabase) Unsubscribe(arg0 context.Context, arg1 *db.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockDatabaseMockRecorder) Unsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockDatabase)(nil).Unsubscribe), arg0, arg1)
}

// Warn mocks base method
func (m *MockDatabase) Warn(arg0 context.Context, arg1 *db.Person, arg2 bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Warn indicates an expected call of Warn
func (mr *MockDatabaseMockRecorder) Warn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockDatabase)(nil).Warn), arg0, arg1, arg2)
}
